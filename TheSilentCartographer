#include <MeOrion.h>

MeDCMotor motorLeft(M1);
MeDCMotor motorRight(M2);

const int baseSpeed = 100;
int correctedLeftSpeed = baseSpeed;
int correctedRightSpeed = baseSpeed;

// Encoder pins
const int ENCODER_LEFT_A = 8;
const int ENCODER_LEFT_B = 2; // INT0
const int ENCODER_RIGHT_A = 9;
const int ENCODER_RIGHT_B = 3; // INT1

volatile long encoderTicksLeft = 0;  //506 ticks/rotation
volatile long encoderTicksRight = 0;

String currentCommand = "";

void setup() {
  Serial.begin(115200);
  while (!Serial);

  // Encoder setup
  pinMode(ENCODER_LEFT_A, INPUT_PULLUP);
  pinMode(ENCODER_LEFT_B, INPUT_PULLUP);
  pinMode(ENCODER_RIGHT_A, INPUT_PULLUP);
  pinMode(ENCODER_RIGHT_B, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENCODER_LEFT_B), handleLeftEncoder, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER_RIGHT_B), handleRightEncoder, CHANGE);

  Serial.println("USB echo ready.");
}

void handleLeftEncoder() {
  bool a = digitalRead(ENCODER_LEFT_A);
  bool b = digitalRead(ENCODER_LEFT_B);
  encoderTicksLeft += (a == b) ? 1 : -1;
}

void handleRightEncoder() {
  bool a = digitalRead(ENCODER_RIGHT_A);
  bool b = digitalRead(ENCODER_RIGHT_B);
  encoderTicksRight += (a == b) ? 1 : -1;
}

void stopMotors() {
  motorLeft.stop();
  motorRight.stop();
}

void resetEncoders() {
  encoderTicksLeft = 0;
  encoderTicksRight = 0;
}

void loop() {
  // Handle incoming commands
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    while (Serial.available()) Serial.read(); // flush remaining
    input.trim();
    Serial.println(input);  // echo for Java confirmation

    resetEncoders(); // reset for fresh movement

    if (input == "Stop") {
      stopMotors();
      currentCommand = ""; // âœ… important: clear command to prevent auto-resume
    } else {
      currentCommand = input;
    }
  }

  // Movement logic
  if (currentCommand == "Forward") {
    int error = encoderTicksLeft - encoderTicksRight;
    float Kp = 0.5;

    int adjustment = error * Kp;
    correctedLeftSpeed = baseSpeed - adjustment;
    correctedRightSpeed = baseSpeed + adjustment;

    correctedLeftSpeed = constrain(correctedLeftSpeed, 0, 255);
    correctedRightSpeed = constrain(correctedRightSpeed, 0, 255);

    motorLeft.run(correctedLeftSpeed);
    motorRight.run(-correctedRightSpeed);
  }

  else if (currentCommand == "Backward") {
    motorLeft.run(-baseSpeed);
    motorRight.run(baseSpeed);
  }

  else if (currentCommand == "Left") {
    motorLeft.run(-baseSpeed);
    motorRight.run(-baseSpeed);
  }

  else if (currentCommand == "Right") {
    motorLeft.run(baseSpeed);
    motorRight.run(baseSpeed);
  }
}

